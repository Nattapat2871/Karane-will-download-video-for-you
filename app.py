import subprocess
import os
import json
import sys
import re # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠ Parse output
import threading # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
from urllib.parse import urlparse # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Domain
from flask import Flask, render_template, request, flash, redirect, url_for, jsonify # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ session ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
from flask_socketio import SocketIO, emit # <--- ‡πÄ‡∏û‡∏¥‡πà‡∏° SocketIO ‡πÅ‡∏•‡∏∞ emit

# --- Configuration ---
YT_DLP_EXECUTABLE = 'yt-dlp'

DOWNLOAD_FOLDER = "Downloads"
# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Domain ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
ALLOWED_DOMAINS = {
    'youtube.com', 'youtu.be', 'tiktok.com', 'instagram.com',
    'facebook.com', 'fb.watch', 'x.com', 'twitter.com', 'bilibili.com', 'b23.tv',
}

# --- Flask App Setup ---
app = Flask(__name__)
# Secret key ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Flask session ‡πÅ‡∏•‡∏∞ SocketIO (‡∏Ñ‡∏ß‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)
app.secret_key = 'a_very_complex_and_random_secret_key_for_socketio'
# --- Initialize SocketIO ---
socketio = SocketIO(app)
# -------------------------

# --- Helper Function: ensure_download_folder ---
def ensure_download_folder():
    """Creates the download folder if it doesn't exist."""
    if not os.path.exists(DOWNLOAD_FOLDER):
        try:
            os.makedirs(DOWNLOAD_FOLDER)
            print(f"Created download folder: {DOWNLOAD_FOLDER}")
        except OSError as e:
            print(f"Error creating download folder {DOWNLOAD_FOLDER}: {e}")
            raise # Re-raise the exception

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Progress) ---
def download_video_with_progress(video_url, format_selection, output_path, sid):
    """Downloads video using Popen, parses progress, and emits SocketIO events."""
    ensure_download_folder()
    progress_data = { # ‡∏™‡∏£‡πâ‡∏≤‡∏á Dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Progress
        'percent': 0.0,
        'downloaded_str': '0B',
        'total_str': 'N/A',
        'speed_str': '0B/s',
        'eta_str': 'N/A'
    }
    output_filename = "N/A" # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

    output_template = os.path.join(output_path, '%(title)s [%(resolution)s - Karane will download video for you üíñ].%(ext)s')

    command = [
        YT_DLP_EXECUTABLE,
        '-f', format_selection,
        '-o', output_template,
        '--no-check-certificates',
        '--no-mtime',
        '--progress', # <--- ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ yt-dlp ‡πÅ‡∏™‡∏î‡∏á progress
        '--newline',  # <--- ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ progress update ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
        video_url
    ]

    print(f"Starting download process for SID {sid}: {' '.join(command)}")

    process = None
    try:
        process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            encoding='utf-8',
            errors='replace',
            bufsize=1
        )

        # --- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Regex ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ---
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: [download]  15.3% of   12.94MiB at    1.01MiB/s ETA 00:11
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î): [download] Got server HTTP response: HTTP/1.1 200 OK
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î): [download]    1.56MiB added... or similar format
        progress_regex = re.compile(
            r"\[download\]\s+"
            r"(?P<percent>\d+\.?\d*)%\s+of\s+"  # Percent (‡∏Å‡∏•‡∏∏‡πà‡∏° percent)
            r"(?P<total_str>~?\s*\d+\.?\d+\w*i?B)\s+at\s+" # Total size (‡∏Å‡∏•‡∏∏‡πà‡∏° total_str) - ‡πÄ‡∏û‡∏¥‡πà‡∏° ~? ‡πÅ‡∏•‡∏∞ \s*
            r"(?P<speed_str>\s*\d+\.?\d+\w*i?B/s)\s+" # Speed (‡∏Å‡∏•‡∏∏‡πà‡∏° speed_str) - ‡πÄ‡∏û‡∏¥‡πà‡∏° \s*
            r"ETA\s+(?P<eta_str>\s*\d{2}:\d{2}(:\d{2})?)" # ETA (‡∏Å‡∏•‡∏∏‡πà‡∏° eta_str) - ‡πÄ‡∏û‡∏¥‡πà‡∏° \s* ‡πÅ‡∏•‡∏∞ (?:\d{2})? ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        )
        # --- Regex ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
        downloaded_only_regex = re.compile(
             r"\[download\]\s+(?P<downloaded_str>\d+\.?\d+\w*i?B)\s+in.*ETA\s+(?P<eta_str>\s*\d{2}:\d{2}(:\d{2})?)" # ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà yt-dlp ‡πÅ‡∏™‡∏î‡∏á
             # ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:
             # r"\[download\]\s+(?P<downloaded_str>\d+\.?\d+\w*i?B)\s+added"
        )
        # ----------------------------------------

        stdout_lines = []

        while True:
            line = process.stdout.readline()
            if not line:
                break

            stdout_lines.append(line.strip())
            print(f"[yt-dlp SID:{sid}] {line.strip()}")

            match = progress_regex.search(line)
            downloaded_match = downloaded_only_regex.search(line) # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ total

            current_progress_data = progress_data.copy() # ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô

            if match:
                try:
                    current_progress_data['percent'] = float(match.group('percent'))
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å % ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πä‡∏∞ 100% ‡πÅ‡∏ï‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á)
                    # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ downloaded_str ‡∏à‡∏≤‡∏Å regex ‡∏≠‡∏∑‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á total size ‡πÅ‡∏ó‡∏ô
                    current_progress_data['total_str'] = match.group('total_str').strip()
                    current_progress_data['speed_str'] = match.group('speed_str').strip()
                    current_progress_data['eta_str'] = match.group('eta_str').strip()
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á downloaded_str ‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ
                    # This is complex to calculate accurately without parsing units (MiB, KiB etc.)
                    # For simplicity, we'll rely on the display format below or potential 'downloaded_only_regex'
                    current_progress_data['downloaded_str'] = f"~{(current_progress_data['percent']/100.0):.1f} of {current_progress_data['total_str']}"

                except (ValueError, TypeError, AttributeError):
                    pass # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°

            elif downloaded_match: # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î
                 try:
                     current_progress_data['downloaded_str'] = downloaded_match.group('downloaded_str').strip()
                     current_progress_data['eta_str'] = downloaded_match.group('eta_str').strip()
                     # Percent ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏ß‡πâ
                     # current_progress_data['percent'] = -1 # Indicate unknown percentage
                     current_progress_data['total_str'] = 'Unknown' # ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                     # Speed ‡∏Å‡πá‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
                     current_progress_data['speed_str'] = 'N/A'
                 except (ValueError, TypeError, AttributeError):
                    pass

            # --- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ú‡πà‡∏≤‡∏ô SocketIO ---
            if match or downloaded_match: # ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å regex
                progress_data = current_progress_data # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                socketio.emit('download_progress', progress_data, room=sid)
                print(f"SID {sid} Progress: {progress_data}")
            # ------------------------------------

        process.stdout.close()
        return_code = process.wait()

        print(f"SID {sid} Process finished with code: {return_code}")

        if return_code == 0:
            # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ‡πÄ‡∏î‡∏¥‡∏°) ...
            final_dest_line = ""
            # ... (‡πÇ‡∏Ñ‡πâ‡∏î Regex ‡∏´‡∏≤ Destination ‡πÄ‡∏î‡∏¥‡∏°) ...
            for l in reversed(stdout_lines):
                # ... (‡πÇ‡∏Ñ‡πâ‡∏î search Regex ‡πÄ‡∏î‡∏¥‡∏°) ...
                pass # ‡πÉ‡∏™‡πà pass ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°

            output_filename = os.path.basename(final_dest_line) if final_dest_line else "unknown file name"
            # ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            socketio.emit('download_complete', {'status': 'Finished, yay ü§©!', 'filename': output_filename, 'final_size': progress_data.get('total_str', 'N/A')}, room=sid) #

            # --- ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
            try:
                 download_folder_path = os.path.abspath(DOWNLOAD_FOLDER)
                 print(f"Download complete. Attempting to open folder: {download_folder_path}")
                 if sys.platform == "win32":
                     os.startfile(download_folder_path)
                     print("Opened folder on Windows.")
                 elif sys.platform == "darwin":
                     subprocess.Popen(["open", download_folder_path])
                     print("Opened folder on macOS.")
                 else:
                     subprocess.Popen(["xdg-open", download_folder_path])
                     print("Opened folder using xdg-open (Linux).")
            except FileNotFoundError:
                 print(f"Could not open folder automatically: '{download_folder_path}' not found.")
            except Exception as e:
                 print(f"Could not open folder automatically: {e}")
            # -------------------------------

        else:
            error_output = "\n".join(stdout_lines[-15:])
            socketio.emit('download_error', {'message': f"yt-dlp ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (code {return_code}):\n{error_output}"}, room=sid)

    except FileNotFoundError:
         print(f"Error: '{YT_DLP_EXECUTABLE}' command not found.")
         socketio.emit('download_error', {'message': f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° '{YT_DLP_EXECUTABLE}'"}, room=sid)
    except Exception as e:
        print(f"Error during download process for SID {sid}: {e}")
        if process and process.poll() is None:
             process.terminate()
        socketio.emit('download_error', {'message': f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {e}"}, room=sid)

# --- Flask Routes ---
@app.route('/', methods=['GET'])
def index():
    """Displays the main download form."""
    return render_template('index.html') # ‡πÉ‡∏ä‡πâ index.html ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

# --- Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Get Video Info ---
# ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Domain
@app.route('/get_video_info', methods=['POST'])
def get_video_info():
    video_url = request.json.get('video_url')
    if not video_url:
        return jsonify({'error': 'Missing video URL'}), 400

    # --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Domain ---
    try:
        parsed_url = urlparse(video_url)
        hostname = parsed_url.hostname
        if hostname:
             if hostname.startswith('www.'): hostname = hostname[4:]
             is_allowed = any(hostname == domain or hostname.endswith('.' + domain) for domain in ALLOWED_DOMAINS if domain != hostname)
             if not is_allowed and hostname not in ALLOWED_DOMAINS:
                   print(f"Info check blocked for domain: {hostname}")
                   return jsonify({'error': f"Not supported URL From : {hostname}"}), 400
        else:
             return jsonify({'error': 'Invalid URL'}), 400
    except Exception as e:
        print(f"Error parsing URL for info: {e}")
        return jsonify({'error': 'The URL format is invalid.'}), 400
    # ---------------------------

    # ‡πÇ‡∏Ñ‡πâ‡∏î get_video_info ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    command = [ YT_DLP_EXECUTABLE, '-j', '--no-check-certificates', video_url ]
    print(f"Fetching info: {' '.join(command)}")
    try:
        process = subprocess.run(
            command, capture_output=True, text=True, check=True,
            encoding='utf-8', errors='replace'
        )
        metadata = json.loads(process.stdout)
        title = metadata.get('title', 'N/A')
        thumbnail_url = metadata.get('thumbnail')
        print(f"Info fetched: Title='{title}', Thumbnail='{thumbnail_url}'")
        return jsonify({'title': title, 'thumbnail': thumbnail_url})
    except FileNotFoundError:
        print(f"Error: '{YT_DLP_EXECUTABLE}' command not found.")
        return jsonify({'error': f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° '{YT_DLP_EXECUTABLE}'"}), 500
    except subprocess.CalledProcessError as e:
        print(f"yt-dlp error fetching info: {e.stderr or e.stdout}")
        error_output = e.stderr.strip() or e.stdout.strip()
        if error_output.startswith("ERROR:"): error_output = error_output[len("ERROR:"):].strip()
        return jsonify({'error': f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {error_output}"}), 400
    except json.JSONDecodeError:
        print(f"Error decoding JSON from yt-dlp output.")
        return jsonify({'error': '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å yt-dlp'}), 500
    except Exception as e:
        print(f"Unexpected error fetching info: {e}")
        return jsonify({'error': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}'}), 500

# --- Route ‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö SocketIO) ---
# Route ‡∏ô‡∏µ‡πâ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£ submit form ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡∏ã‡∏∂‡πà‡∏á JS ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏ß‡πâ)
# ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ SocketIO ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
@app.route('/start_download', methods=['POST'])
def start_download_route():
    # ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤ JS ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£ Submit Form ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
    # ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô Interface ‡∏õ‡∏Å‡∏ï‡∏¥
    flash("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö", "error")
    return redirect(url_for('index'))

# --- SocketIO Event Handlers ---
@socketio.on('connect')
def handle_connect():
    """‡πÄ‡∏°‡∏∑‡πà‡∏≠ Client ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SocketIO ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
    print(f'Client connected: {request.sid}')

@socketio.on('disconnect')
def handle_disconnect():
    """‡πÄ‡∏°‡∏∑‡πà‡∏≠ Client ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
    print(f'Client disconnected: {request.sid}')

@socketio.on('start_download_event') # Event ‡∏ó‡∏µ‡πà Client ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î
def handle_start_download(data):
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô Background Thread ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Event ‡∏à‡∏≤‡∏Å Client"""
    sid = request.sid
    video_url = data.get('url')
    format_choice = data.get('format') # ‡∏£‡∏±‡∏ö format choice ‡∏à‡∏≤‡∏Å client
    print(f"Received start download event from SID {sid} for URL: {video_url} with format choice: {format_choice}")

    if not video_url:
        emit('download_error', {'message': '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏ URL'}, room=sid)
        return

    # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Domain ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ---
    try:
        parsed_url = urlparse(video_url)
        hostname = parsed_url.hostname
        if hostname:
            if hostname.startswith('www.'): hostname = hostname[4:]
            is_allowed = any(hostname == d or hostname.endswith('.' + d) for d in ALLOWED_DOMAINS if d != hostname)
            if not is_allowed and hostname not in ALLOWED_DOMAINS:
                 print(f"Download blocked by Socket event for domain: {hostname}")
                 emit('download_error', {'message': f"‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å: {hostname}"}, room=sid)
                 return
        else:
            emit('download_error', {'message': "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö URL ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}, room=sid)
            return
    except Exception as e:
        print(f"Error parsing URL in socket handler: {e}")
        emit('download_error', {'message': "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö URL ‡πÑ‡∏î‡πâ"}, room=sid)
        return
    # ---------------------------------------------

    # --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Format String (‡πÉ‡∏ä‡πâ Logic ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) ---
    format_string = ""
    if format_choice == '1': format_string = "bestvideo+bestaudio/best"
    elif format_choice == '2': format_string = "bestvideo[height<=?2160]+bestaudio/best[height<=?2160]"
    elif format_choice == '3': format_string = "bestvideo[height<=?1440]+bestaudio/best[height<=?1440]"
    elif format_choice == '4': format_string = "bestvideo[height<=?1080]+bestaudio/best[height<=?1080]"
    elif format_choice == '5': format_string = "bestvideo[height<=?720]+bestaudio/best[height<=?720]"
    elif format_choice == '6': format_string = "bestvideo[height<=?480]+bestaudio/best[height<=?480]" # ‡πÄ‡∏û‡∏¥‡πà‡∏° 6 ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏≤‡∏° index.html
    elif format_choice == '7': format_string = "best[ext=mp4]/best"
    elif format_choice == '8': format_string = "bestaudio/best"
    else: format_string = "bestvideo+bestaudio/best" # Default
    # ----------------------------------------------------

    if not format_string:
         emit('download_error', {'message': 'Format ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'}, room=sid)
         return

    # --- ‡πÄ‡∏£‡∏¥‡πà‡∏° Thread ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ---
    print(f"Starting download thread for SID {sid} with format: {format_string}")
    thread = threading.Thread(target=download_video_with_progress,
                              args=(video_url, format_string, DOWNLOAD_FOLDER, sid))
    thread.daemon = True # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô Daemon thread ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å
    thread.start()
    # -----------------------------------

    # Emit ‡∏ö‡∏≠‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
    emit('download_started', {'message': '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß...'}, room=sid)


# --- Run the App with SocketIO ---
if __name__ == '__main__':
    ensure_download_folder()
    print("Starting Flask-SocketIO server...")
    # allow_unsafe_werkzeug=True ‡∏≠‡∏≤‡∏à‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Werkzeug ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏Å‡∏±‡∏ö debug mode
    socketio.run(app, debug=True, host='127.0.0.1', port=5000, allow_unsafe_werkzeug=True)